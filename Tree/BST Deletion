
#include <iostream>
using namespace std;
class node{
    public:
    int data;
    node *left;
    node *right;
    node(int d){
        data=d;
        left=NULL;
        right=NULL;
    }
};
node* insertInBST(node *root,int data){
    if(root==NULL){
        return new node(data);
    }
    if(data<=root->data){
        root->left=insertInBST(root->left,data);
    }
    else{
        root->right=insertInBST(root->right,data);
    }
    return root;
}
node* build(){
    int d;
    cin>>d;
    node *root=NULL;
    while(d!=-1){
        root=insertInBST(root,d);
        cin>>d;
    }
    return root;
}
//inorder of bst is always sorted 
void inorder(node *root){
    if(root==NULL)
        return;
    inorder(root->left);
    cout<<root->data<<", ";
    inorder(root->right);
}
node* deleteinBST(node *root,int data)
{
    if(root==NULL){
        return NULL;
    }
    else if(data<root->data){
        root->left=deleteinBST(root->left,data);
        return root;
    }
    else if(data==root->data)
    {
        //Case1: Node with zero children- leaf node
        if(root->left==NULL && root->right==NULL){
            delete root;
            return NULL;
        }
        //Case2: Only one child
        if(root->left!=NULL && root->right==NULL){
            node *temp=root->left;
            delete root;
            return temp;
        }
        if(root->left==NULL && root->right!=NULL){
            node *temp=root->right;
            delete root;
            return temp;
        }
        //Case3: 2 childs
        node *replace=root->right;
        //Find the left order successor from the right sub tree i.e the left most leaf node of right sub tree
        while(replace->left!=NULL){
            replace=replace->left;
        }
        root->data=replace->data;
        root->right=deleteinBST(root->right,replace->data);
        return root;
    }
    else{
        root->right=deleteinBST(root->right,data);
        return root;
    }

}
int main() 
{
    node *root=build();
    inorder(root);
    cout<<endl;
    
    int s;
    cin>>s;
    root=deleteinBST(root,s);
    inorder(root);
    return 0;
}

Input-
5 3 7 1 6 8 -1
5

Output-
1, 3, 5, 6, 7, 8,
1, 3, 6, 7, 8,
