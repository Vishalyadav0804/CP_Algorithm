
//RECURSIVE CODE

#include <iostream>
using namespace std;
int knapSack(int W,int wt[],int val[],int n){
    if(n==0 || W==0){
        return 0;
    }
    if(wt[n-1]<=W){
        return max(val[n-1] + knapSack(W-wt[n-1],wt,val,n-1), knapSack(W,wt,val,n-1));
    }else{
        return knapSack(W,wt,val,n-1);
    }
}
int main() {
    int val[] = {60, 100, 120};  
    int wt[] = {10, 20, 30};  
    int W = 50;  
    int n = sizeof(val)/sizeof(val[0]);  
    cout<<knapSack(W, wt, val, n);  
    return 0; 
}


//DP CODE

#include <iostream>
using namespace std;
int knapSack(int w,int wt[],int val[],int n){
    int dp[n+1][w+1];
    for(int i=0;i<=n;i++){
        for(int j=0;j<=w;j++){
            if(i==0 || j==0){
                dp[i][j]=0;
            }
            else if(wt[i-1]<=j){
                dp[i][j]=max(val[i-1]+dp[i-1][j-wt[i-1]], dp[i-1][j]);
            }
            else{
                dp[i][j]=dp[i-1][j];
            }
        }
    }
    return dp[n][w];
}
int main() {
    int val[] = {60, 100, 120};  
    int wt[] = {10, 20, 30};  
    int w = 50;  
    int n = sizeof(val)/sizeof(val[0]);  
    cout<<knapSack(w, wt, val, n);  
    return 0; 
}
