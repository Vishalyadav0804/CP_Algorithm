
#include <iostream>
#include<algorithm>
#include<vector>
using namespace std;
void upheapify(vector<int> &heap,int idx){
    if(idx==0){
        return;
    }
    int parent_idx=(idx-1)/2;
    if(heap[parent_idx]<heap[idx]){
        swap(heap[parent_idx],heap[idx]);
        upheapify(heap,parent_idx);
    }
    else{
        return;
    }
}

void downheapify(vector<int> &heap,int idx){
    int leftidx=2*idx+1;
    int rightidx=2*idx+2;
    if(leftidx>=heap.size() && rightidx>=heap.size()){
        return;
    }
    int largestidx=idx;
    if(leftidx<heap.size() && heap[leftidx]>heap[largestidx]){
        largestidx=leftidx;
    }
    if(rightidx<heap.size() && heap[rightidx]>heap[largestidx]){
        largestidx=rightidx;
    }
    if(largestidx==idx)
        return;
    swap(heap[largestidx],heap[idx]);
    downheapify(heap,largestidx);
}

//time complexity of building heap in such manner is O(n)
void buildheapoptimise(vector<int> &heap){
    for(int i=heap.size()-1;i>=0;i--){
        downheapify(heap,i);
    }
}

//time complexity of building heap in such manner is O(nlogn)
void buildheap(vector<int> &heap){
    for(int i=0;i<heap.size();i++){
        upheapify(heap,i);
    }
}

void display(vector<int> &heap){
    for(int i=0;i<heap.size();i++){
        cout<<heap[i]<<" ";
    }
    cout<<endl;
}

int main() {
    vector<int> heap;
    int n,x;
    cin>>n;
    for(int i=0;i<n;i++){
        cin>>x;
        heap.push_back(x);
    }
    buildheap(heap);
    display(heap);
    buildheapoptimise(heap);
    display(heap);
    return 0;
}

Input-
11
100 40 43 5 2 9 20 10 20 35 38

Output-
100 40 43 20 38 9 20 5 10 2 35 
100 40 43 20 38 9 20 5 10 2 35 
